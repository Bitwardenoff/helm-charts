---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-setup"
  labels:
    app.kubernetes.io/component: pre-install-hook
{{ include "bitwarden.labels" . | indent 4 }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "2"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: "{{ .Release.Name }}-setup"
      labels:
        app.kubernetes.io/component: pre-install-hook
{{ include "bitwarden.labels" . | indent 8 }}
    spec:
      initContainers:
      - name: setup
        command: [
          "dotnet", "Setup.dll"
        ]
        args: [
          "-install", "true",
          "-domain", "{{ .Values.general.domain }}",
          "-install-id", "$(globalSettings__installation__id)",
          "-install-key", "$(globalSettings__installation__key)",
          "-skip-ssl", "true",
          "-os", "lin",
          "-corev", "{{ .Values.general.coreVersion }}",
          "-webv", "{{ .Values.general.webVersion }}"
        ]
        envFrom:
          - secretRef:
              name: {{ template "bitwarden.secretProviderClass" . }}-secrets
        image: "bitwarden/setup:{{ .Values.general.coreVersion }}"
        volumeMounts:
          - name: temp
            mountPath: "/bitwarden"
          - name: secrets-store-inline
            mountPath: "/mnt/secrets-store"
            readOnly: true
      - name: fix-permissions
        command: [
          "chown", "-R", "1001:0", "/bitwarden"
        ]
        image: "busybox"
        volumeMounts:
        - name: temp
          mountPath: "/bitwarden"
      containers:
      - name: create-resources
        command: [
          "/bin/sh", "-c"
        ]
        args: ['
          . /bitwarden/env/mssql.override.env;
          . /bitwarden/env/global.override.env;
{{- if or .Values.component.identity.deployment.enabled .Values.component.sso.deployment.enabled }}
          kubectl create secret generic {{ template "bitwarden.identity" . }} --from-file=/bitwarden/identity/identity.pfx -n {{ .Release.Namespace }};
{{- end }}
{{- if .Values.component.web.deployment.enabled }}
          kubectl create secret generic {{ template "bitwarden.web" . }} --from-file=/bitwarden/web/app-id.json -n {{ .Release.Namespace }};
{{- end }}
          kubectl patch configmap {{ .Values.general.configMapName }} -n {{ .Release.Namespace }} --type="merge" -p "
            {
              \"data\": {
                \"globalSettings__identityServer__certificatePassword\":\"$globalSettings__identityServer__certificatePassword\",
                \"globalSettings__internalIdentityKey\":\"$globalSettings__internalIdentityKey\",
                \"globalSettings__oidcIdentityClientKey\":\"$globalSettings__oidcIdentityClientKey\",
                \"globalSettings__duo__aKey\":\"$globalSettings__duo__aKey\"
              }
            }
          ";
{{- if not .Values.database.enabled }}
          kubectl patch configmap {{ .Values.general.configMapName }} -n {{ .Release.Namespace }} --type="merge" -p "
            {
              \"data\": {
                \"globalSettings__sqlServer__connectionString\":\"{{ template "bitwarden.dbConnectionString" . }}\"
              }
            }
          ";
{{- else }}
          kubectl patch configmap {{ .Values.general.configMapName }} -n {{ .Release.Namespace }} --type="merge" -p "
            {
              \"data\": {
                \"globalSettings__sqlServer__connectionString\":\"Data Source=tcp:{{ template "bitwarden.mssql" . }},{{ .Values.database.service.port }};Initial Catalog=vault;Persist Security Info=False;User ID=sa;Password=$SA_PASSWORD;MultipleActiveResultSets=False;Connect Timeout=30;Encrypt=True;TrustServerCertificate=True\",
                \"SA_PASSWORD\":\"$SA_PASSWORD\"
              }
            }
          ";
{{- end }}
          echo "Done"
        ']
        image: "bitnami/kubectl:1.20"
        volumeMounts:
        - name: temp
          mountPath: "/bitwarden"
      restartPolicy: Never
      volumes:
        - name: temp
          emptyDir:
            medium: Memory
        - name: secrets-store-inline
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ template "bitwarden.secretProviderClass" . }}
