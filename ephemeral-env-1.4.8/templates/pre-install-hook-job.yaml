{{- $identityCertPasswordTxtValue := (randAlpha 32) }}
{{- $dbPasswordTxtValue := (randAlphaNum 32) }}
{{- $dbServiceName := include "bitwarden.mssql" . }}

{{- $dbConnectionStringValue := printf "Data Source=tcp:%s,1433;Initial Catalog=vault;Persist Security Info=False;User ID=sa;Password=%s;MultipleActiveResultSets=False;Connect Timeout=30;Encrypt=True;TrustServerCertificate=True" $dbServiceName $dbPasswordTxtValue }}

{{- $currentGlobalEnvSecrets := (lookup "v1" "Secret" .Release.Namespace "{{ .Release.Name }}-global-env-secrets") }}
{{- if $currentGlobalEnvSecrets }}
{{- $identityCertPasswordTxtValue := index $currentGlobalEnvSecrets.data "globalSettings__identityServer__certificatePassword" | b64dec }}
{{- $dbConnectionStringValue := index $currentGlobalEnvSecrets.data "globalSettings__sqlServer__connectionString" | b64dec }}
{{- end -}}

---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-setup"
  labels:
    app.kubernetes.io/component: pre-install-hook
{{ include "bitwarden.labels" . | indent 4 }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "2"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: "{{ .Release.Name }}-setup"
      labels:
        app.kubernetes.io/component: pre-install-hook
{{ include "bitwarden.labels" . | indent 8 }}
    spec:
    {{- if .Values.serviceAccount }}
      serviceAccountName: "{{ .Values.serviceAccount }}"
    {{- end }}
{{- $currentIdentityCert := (lookup "v1" "Secret" .Release.Namespace "{{ .Release.Name }}-identity-cert") }}
{{- if not $currentIdentityCert }}
      initContainers:
      - name: generate-identity-cert
        command:
          - "/bin/sh"
          - "-c"
        args: ['
          openssl req -x509 -newkey rsa:4096 -sha256 -nodes -keyout /bitwarden/identity.key -out /bitwarden/identity.crt -subj "/CN=Bitwarden IdentityServer" -days 36500;
          openssl pkcs12 -export -out /bitwarden/identity.pfx -inkey /bitwarden/identity.key -in /bitwarden/identity.crt -passout pass:{{ $identityCertPasswordTxtValue }};
          chmod 777 /bitwarden/identity.pfx;
          echo Done;
        ']
        image: "docker.io/nginx"
        volumeMounts:
        - name: temp
          mountPath: "/bitwarden"
{{- end }}
      containers:
      - name: create-resources
        command: 
          - "/bin/sh"
          - "-c"
        args: ['
          ls -atlh /bitwarden;
{{- if not $currentIdentityCert }}
          kubectl create secret generic {{ .Release.Name }}-identity-cert --from-file=/bitwarden/identity.pfx -n {{ .Release.Namespace }};
{{- end }}
          kubectl create secret generic {{ .Release.Name }}-global-env-secrets -n {{ .Release.Namespace }} 
            --from-literal=globalSettings__identityServer__certificatePassword={{ $identityCertPasswordTxtValue | quote }} 
            --from-literal=globalSettings__sqlServer__connectionString={{ $dbConnectionStringValue | quote }} 
            --from-literal=SA_PASSWORD={{ $dbPasswordTxtValue | quote }};
          echo "Done"
        ']
        image: "bitnami/kubectl:1.21"
        volumeMounts:
        - name: temp
          mountPath: "/bitwarden"
      restartPolicy: Never
      volumes:
        - name: temp
          emptyDir:
            medium: Memory
        - name: secrets-store-inline
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ template "bitwarden.secretProviderClass" . }}
