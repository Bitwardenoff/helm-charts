---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-setup"
  labels:
    app.kubernetes.io/component: pre-install-hook
{{ include "bitwarden.labels" . | indent 4 }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: "{{ .Release.Name }}-setup"
      labels:
        app.kubernetes.io/component: pre-install-hook
{{ include "bitwarden.labels" . | indent 8 }}
    spec:
      automountServiceAccountToken: true
      serviceAccountName: {{ include "bitwarden.serviceAccountName" . }}
      initContainers:
      - name: setup
        command: [
          "dotnet", "Setup.dll"
        ]
        args: [
          "-install", "true",
          "-domain", "{{ .Values.domain }}",
          "-install-id", "{{ .Values.installationId }}",
          "-install-key", "{{ .Values.installationKey }}",
          "-skip-ssl", "true",
          "-os", "lin",
          "-corev", "{{ .Values.coreVersion }}",
          "-webv", "{{ .Values.webVersion }}"
        ]
        image: "bitwarden/setup:dev"
        volumeMounts:
        - name: temp
          mountPath: "/bitwarden"
      - name: fix-permissions
        command: [
          "chown", "-R", "1001:0", "/bitwarden"
        ]
        image: "busybox"
        volumeMounts:
        - name: temp
          mountPath: "/bitwarden"
      containers:
      - name: create-resources
        command: [
          "/bin/sh", "-c"
        ]
        args: ['
          . /bitwarden/env/mssql.override.env;
          . /bitwarden/env/global.override.env;
{{- if .Values.proxyInstall }}
          sed -i "s/8080 default_server/{{ .Values.proxyServiceTargetPort }} default_server/g" /bitwarden/nginx/default.conf;
          sed -i "s/admin:5000/{{ .Values.adminServiceName }}:{{ .Values.adminServicePort }}/g" /bitwarden/nginx/default.conf;
          sed -i "s/api:5000/{{ .Values.apiServiceName }}:{{ .Values.apiServicePort }}/g" /bitwarden/nginx/default.conf;
          sed -i "s/attachments:5000/{{ .Values.attachmentsServiceName }}:{{ .Values.attachmentsServicePort }}/g" /bitwarden/nginx/default.conf;
          sed -i "s/events:5000/{{ .Values.eventsServiceName }}:{{ .Values.eventsServicePort }}/g" /bitwarden/nginx/default.conf;
          sed -i "s/icons:5000/{{ .Values.iconsServiceName }}:{{ .Values.iconsServicePort }}/g" /bitwarden/nginx/default.conf;
          sed -i "s/identity:5000/{{ .Values.identityServiceName }}:{{ .Values.identityServicePort }}/g" /bitwarden/nginx/default.conf;
          sed -i "s/notifications:5000/{{ .Values.notificationsServiceName }}:{{ .Values.notificationsServicePort }}/g" /bitwarden/nginx/default.conf;
          sed -i "s/portal:5000/{{ .Values.portalServiceName }}:{{ .Values.portalServicePort }}/g" /bitwarden/nginx/default.conf;
          sed -i "s/sso:5000/{{ .Values.ssoServiceName }}:{{ .Values.ssoServicePort }}/g" /bitwarden/nginx/default.conf;
          sed -i "s/web:5000/{{ .Values.webServiceName }}:{{ .Values.webServicePort }}/g" /bitwarden/nginx/default.conf;
          kubectl create configmap {{ .Values.proxyVolumeConfigMapName }} --from-file=/bitwarden/nginx/default.conf -n {{ .Release.Namespace }};
{{- end }}
{{- if or .Values.identityInstall .Values.ssoInstall }}
          kubectl create secret generic {{ .Values.identityVolumeSecretName }} --from-file=/bitwarden/identity/identity.pfx -n {{ .Release.Namespace }};
{{- end }}
{{- if .Values.webInstall }}
          kubectl create secret generic {{ .Values.webVolumeSecretName }} --from-file=/bitwarden/web/app-id.json -n {{ .Release.Namespace }};
{{- end }}
          kubectl patch configmap {{ .Values.configMapName }} -n {{ .Release.Namespace }} --type="merge" -p "
            {
              \"data\": {
                \"globalSettings__identityServer__certificatePassword\":\"$globalSettings__identityServer__certificatePassword\",
                \"globalSettings__internalIdentityKey\":\"$globalSettings__internalIdentityKey\",
                \"globalSettings__oidcIdentityClientKey\":\"$globalSettings__oidcIdentityClientKey\",
                \"globalSettings__duo__aKey\":\"$globalSettings__duo__aKey\"
              }
            }
          ";
{{- if eq .Values.databaseType "mssql" }}
          kubectl patch configmap {{ .Values.configMapName }} -n {{ .Release.Namespace }} --type="merge" -p "
            {
              \"data\": {
                \"globalSettings__sqlServer__connectionString\":\"{{ template "bitwarden.dbConnectionString" . }}\"
              }
            }
          ";
{{- else }}
          kubectl patch configmap {{ .Values.configMapName }} -n {{ .Release.Namespace }} --type="merge" -p "
            {
              \"data\": {
                \"globalSettings__sqlServer__connectionString\":\"Data Source=tcp:{{ .Values.mssqlServiceName }},{{ .Values.mssqlServicePort }};Initial Catalog=vault;Persist Security Info=False;User ID=sa;Password=$SA_PASSWORD;MultipleActiveResultSets=False;Connect Timeout=30;Encrypt=True;TrustServerCertificate=True\",
                \"SA_PASSWORD\":\"$SA_PASSWORD\"
              }
            }
          ";
{{- end }}
          echo "Done"
        ']
        image: "bitnami/kubectl:1.19"
        volumeMounts:
        - name: temp
          mountPath: "/bitwarden"
      restartPolicy: Never
      volumes:
      - name: temp
        emptyDir:
          medium: Memory
