---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-setup"
  labels:
    app.kubernetes.io/component: pre-install-hook
{{ include "bitwarden.labels" . | indent 4 }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: "{{ .Release.Name }}-setup"
      labels:
        app.kubernetes.io/component: pre-install-hook
{{ include "bitwarden.labels" . | indent 8 }}
    spec:
      initContainers:
      - name: setup
        command: [
          "dotnet", "Setup.dll"
        ]
        args: [
          "-install", "true",
          "-domain", "{{ .Values.general.domain }}",
          "-install-id", "{{ .Values.general.installationId }}",
          "-install-key", "{{ .Values.general.installationKey }}",
          "-skip-ssl", "true",
          "-os", "lin",
          "-corev", "{{ .Values.general.coreVersion }}",
          "-webv", "{{ .Values.general.webVersion }}"
        ]
        image: "bitwarden/setup:{{ .Values.general.coreVersion }}"
        volumeMounts:
        - name: temp
          mountPath: "/bitwarden"
      - name: fix-permissions
        command: [
          "chown", "-R", "1001:0", "/bitwarden"
        ]
        image: "busybox"
        volumeMounts:
        - name: temp
          mountPath: "/bitwarden"
      containers:
      - name: create-resources
        command: [
          "/bin/sh", "-c"
        ]
        args: ['
          . /bitwarden/env/mssql.override.env;
          . /bitwarden/env/global.override.env;
{{- if .Values.deployment.proxy.enabled }}
          sed -i "s/8080 default_server/{{ .Values.service.proxy.targetPort }} default_server/g" /bitwarden/nginx/default.conf;
          sed -i "s/admin:5000/{{ template "bitwarden.admin" . }}:{{ .Values.service.admin.port }}/g" /bitwarden/nginx/default.conf;
          sed -i "s/api:5000/{{ template "bitwarden.api" . }}:{{ .Values.service.api.port }}/g" /bitwarden/nginx/default.conf;
          sed -i "s/attachments:5000/{{ template "bitwarden.attachments" . }}:{{ .Values.service.attachments.port }}/g" /bitwarden/nginx/default.conf;
          sed -i "s/events:5000/{{ template "bitwarden.events" . }}:{{ .Values.service.events.port }}/g" /bitwarden/nginx/default.conf;
          sed -i "s/icons:5000/{{ template "bitwarden.icons" . }}:{{ .Values.service.icons.port }}/g" /bitwarden/nginx/default.conf;
          sed -i "s/identity:5000/{{ template "bitwarden.identity" . }}:{{ .Values.service.identity.port }}/g" /bitwarden/nginx/default.conf;
          sed -i "s/notifications:5000/{{ template "bitwarden.notifications" . }}:{{ .Values.service.notifications.port }}/g" /bitwarden/nginx/default.conf;
          sed -i "s/portal:5000/{{ template "bitwarden.portal" . }}:{{ .Values.service.portal.port }}/g" /bitwarden/nginx/default.conf;
          sed -i "s/sso:5000/{{ template "bitwarden.sso" . }}:{{ .Values.service.sso.port }}/g" /bitwarden/nginx/default.conf;
          sed -i "s/web:5000/{{ template "bitwarden.web" . }}:{{ .Values.service.web.port }}/g" /bitwarden/nginx/default.conf;
          kubectl create configmap {{ template "bitwarden.proxy" . }} --from-file=/bitwarden/nginx/default.conf -n {{ .Release.Namespace }};
{{- end }}
{{- if or .Values.deployment.identity.enabled .Values.deployment.sso.enabled }}
          kubectl create secret generic {{ template "bitwarden.identity" . }} --from-file=/bitwarden/identity/identity.pfx -n {{ .Release.Namespace }};
{{- end }}
{{- if .Values.deployment.web.enabled }}
          kubectl create secret generic {{ template "bitwarden.web" . }} --from-file=/bitwarden/web/app-id.json -n {{ .Release.Namespace }};
{{- end }}
          kubectl patch configmap {{ .Values.general.configMapName }} -n {{ .Release.Namespace }} --type="merge" -p "
            {
              \"data\": {
                \"globalSettings__identityServer__certificatePassword\":\"$globalSettings__identityServer__certificatePassword\",
                \"globalSettings__internalIdentityKey\":\"$globalSettings__internalIdentityKey\",
                \"globalSettings__oidcIdentityClientKey\":\"$globalSettings__oidcIdentityClientKey\",
                \"globalSettings__duo__aKey\":\"$globalSettings__duo__aKey\"
              }
            }
          ";
{{- if eq .Values.database.type "mssql" }}
          kubectl patch configmap {{ .Values.general.configMapName }} -n {{ .Release.Namespace }} --type="merge" -p "
            {
              \"data\": {
                \"globalSettings__sqlServer__connectionString\":\"{{ template "bitwarden.dbConnectionString" . }}\"
              }
            }
          ";
{{- else }}
          kubectl patch configmap {{ .Values.general.configMapName }} -n {{ .Release.Namespace }} --type="merge" -p "
            {
              \"data\": {
                \"globalSettings__sqlServer__connectionString\":\"Data Source=tcp:{{ template "bitwarden.mssql" . }},{{ .Values.service.mssql.port }};Initial Catalog=vault;Persist Security Info=False;User ID=sa;Password=$SA_PASSWORD;MultipleActiveResultSets=False;Connect Timeout=30;Encrypt=True;TrustServerCertificate=True\",
                \"SA_PASSWORD\":\"$SA_PASSWORD\"
              }
            }
          ";
{{- end }}
          echo "Done"
        ']
        image: "bitnami/kubectl:1.19"
        volumeMounts:
        - name: temp
          mountPath: "/bitwarden"
      restartPolicy: Never
      volumes:
      - name: temp
        emptyDir:
          medium: Memory
